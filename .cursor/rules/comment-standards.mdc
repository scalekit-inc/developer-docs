---
description: See the code snippets in the markdown files, and suggest the comments in a particular style
alwaysApply: true
---
# Code Commenting Standards

## Overview

This document outlines best practices for writing effective code comments based on industry standards and proven techniques. Good comments complement good code by providing context and explaining the "why" behind implementation decisions.

## Core Principles

### Rule 1: Comments should not duplicate the code

- Avoid comments that simply restate what the code does
- Comments should add value beyond what's obvious from reading the code
- Remove comments that add no information and only create visual clutter

**Bad Example:**

```javascript
i = i + 1 // Add one to i
```

**Good Example:**

```javascript
// Increment counter to track the number of failed login attempts
failedLoginCount++
```

### Rule 2: Good comments do not excuse unclear code

- Don't use comments to explain poorly written code
- Instead, refactor the code to be self-explanatory
- Use better variable names, function names, and code structure

**Bad Example:**

```javascript
private static Node getBestChildNode(Node node) {
    Node n; // best child node candidate
    for (Node node: node.getChildren()) {
        // update n if the current state is better
        if (n == null || utility(node) > utility(n)) {
            n = node;
        }
    }
    return n;
}
```

**Good Example:**

```javascript
private static Node getBestChildNode(Node node) {
    Node bestNode;
    for (Node currentNode: node.getChildren()) {
        if (bestNode == null || utility(currentNode) > utility(bestNode)) {
            bestNode = currentNode;
        }
    }
    return bestNode;
}
```

### Rule 3: If you can't write a clear comment, there may be a problem with the code

- If code is too complex to explain clearly, consider refactoring it
- Complex code should be broken down into smaller, more understandable pieces
- Avoid "clever" code that requires extensive explanation

### Rule 4: Comments should dispel confusion, not cause it

- Ensure comments clarify rather than obscure the code's purpose
- Avoid cryptic or joke comments that don't help understanding
- Remove comments that create more questions than they answer

### Rule 5: Explain unidiomatic code in comments

- Comment on code that might seem unnecessary or redundant
- Explain why certain patterns are used when they're not immediately obvious
- Provide context for non-standard implementations

**Example:**

```javascript
final Object value = (new JSONTokener(jsonString)).nextValue();
// Note that JSONTokener.nextValue() may return
// a value equals() to null.
if (value == null || value.equals(null)) {
    return null;
}
```

## Documentation Standards

### JavaScript/TypeScript Comments

- Use [JSDoc](https://jsdoc.app/) standards for all function, class, and complex logic comments
- Include parameter descriptions (`@param`), return values (`@returns`), types (`@type`), and descriptions
- Document exceptions and edge cases

**Example:**

```javascript
/**
 * Calculates the distance between two geographic coordinates using the Haversine formula.
 *
 * @param {number} lat1 - Latitude of the first point in degrees
 * @param {number} lon1 - Longitude of the first point in degrees
 * @param {number} lat2 - Latitude of the second point in degrees
 * @param {number} lon2 - Longitude of the second point in degrees
 * @returns {number} Distance between the points in kilometers
 * @throws {Error} If coordinates are invalid (outside valid ranges)
 */
function calculateDistance(lat1, lon1, lat2, lon2) {
  // Implementation...
}
```

### Other Languages

- Follow idiomatic commenting conventions for each language:
  - **Python**: Use docstrings and inline comments with `#`
  - **C#**: Use XML documentation comments (`///`)
  - **Java**: Use JavaDoc comments (`/** */`)
  - **Go**: Use standard comment format with package documentation

## Best Practices

### Rule 6: Provide links to the original source of copied code

- Always attribute code copied from external sources
- Include URLs to Stack Overflow answers, GitHub repositories, or documentation
- This helps future readers understand context and find updates

**Example:**

```javascript
/**
 * Converts a Drawable to Bitmap.
 * Source: https://stackoverflow.com/a/46018816/2219998
 */
function drawableToBitmap(drawable) {
  // Implementation...
}
```

### Rule 7: Include links to external references where helpful

- Reference standards, RFCs, and official documentation
- Link to relevant specifications when implementing protocols
- Help readers understand the problem being solved

**Example:**

```javascript
// http://tools.ietf.org/html/rfc4180 suggests that CSV lines
// should be terminated by CRLF, hence the \r\n.
csvStringBuilder.append('\r\n')
```

### Rule 8: Add comments when fixing bugs

- Document bug fixes with context about the issue
- Reference issue trackers and bug reports
- Explain workarounds and their limitations

**Example:**

```javascript
// NOTE: At least in Firefox 2, if the user drags outside of the browser window,
// mouse-move (and even mouse-down) events will not be received until
// the user drags back inside the window. A workaround for this issue
// exists in the implementation for onMouseLeave().
@Override
public void onMouseMove(Widget sender, int x, int y) {
    // Implementation...
}
```

### Rule 9: Use comments to mark incomplete implementations

- Use standard formats for TODO, FIXME, and NOTE comments
- Include context about what needs to be done
- Reference issue trackers when possible

**Example:**

```javascript
// TODO(hal): We are making the decimal separator be a period,
// regardless of the locale of the phone. We need to think about
// how to allow comma as decimal separator, which will require
// updating number parsing and other places that transform numbers
// to strings, such as FormatAsDecimal
```

## Comment Types and Usage

### Inline Comments

- Use sparingly and only when necessary
- Explain complex logic or non-obvious decisions
- Keep them concise and focused

### Block Comments

- Use for explaining complex algorithms or business logic
- Provide context for why certain approaches were chosen
- Document assumptions and constraints

### Function/Class Comments

- Always document public APIs
- Explain the purpose, parameters, return values, and exceptions
- Include usage examples for complex functions

### File Headers

- Include copyright information, license, and authorship
- Provide a brief description of the file's purpose
- Document dependencies and requirements

## Quality Guidelines

### Clarity and Conciseness

- Write clear, concise comments that explain the "why" behind the code
- Avoid obvious comments that just restate what the code does
- Use active voice and present tense

### Maintenance

- Keep comments up-to-date with code changes
- Remove outdated or incorrect comments
- Review comments during code reviews

### Language and Style

- Use consistent terminology throughout the codebase
- Write comments in the same language as the code (usually English)
- Use proper grammar and spelling

## Anti-Patterns to Avoid

### Don't:

- Comment every line of code
- Use comments to explain bad code instead of fixing it
- Write cryptic or joke comments
- Leave TODO comments without context
- Copy code without attribution
- Use comments to disable code (use version control instead)

### Do:

- Write self-documenting code when possible
- Use comments to explain complex business logic
- Document assumptions and edge cases
- Keep comments close to the code they explain
- Update comments when updating code

## Conclusion

Remember: "Code Tells You How, Comments Tell You Why." Good comments complement good code by providing context, explaining decisions, and helping future developers (including yourself) understand the codebase more quickly and accurately.

Following these standards will help create maintainable, understandable code that serves both current and future development needs.
