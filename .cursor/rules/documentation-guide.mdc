---
globs: **/*.md,**/*.mdx
---
## Scope and goals
- Use this guide when creating or editing documentation in `src/content/docs/**`. It encodes the technical writing guide (tw-guide) used by Scalekit.
- Prioritize clarity, accuracy, and skimmability. Favor the reader’s task and intent over internal implementation details.

## Document structure
- Use clear, descriptive page titles that state the purpose and outcome.
- Provide complete frontmatter with title, description, and navigation metadata.
- Follow a logical heading hierarchy (H2, H3, H4). Keep sections focused and scannable.
- Enable a table of contents when a page has multiple major sections.
- Set concise sidebar labels that match user vocabulary.

### Frontmatter standards
```yaml
---
title: "Descriptive title"
description: "Clear, concise description of the content"
tableOfContents: true/false
sidebar:
  label: "Navigation label"
prev: false/object
next: false/object
---
```

## Writing style and tone
- Write simply and directly. Prefer short sentences and plain language.
- Use active voice and imperative mood (for steps and procedures).
- Explain the “why” before the “how.” Give context, then instructions.
- Avoid jargon and acronyms unless necessary; define them on first use.
- Be consistent in terminology across pages.

## Content patterns
- Start with an overview/value proposition and when to use the feature.
- For procedures, use sequential steps and verification checks.
- Include prerequisites before instructions.
- Provide links to related concepts, guides, and references.

### Components to use
- Steps: use for sequential instructions.
- CheckItem: use for best practices and checklists.
- Tabs/TabItem: use for multi-language or multi-framework examples.
- Aside: use for notes, warnings, and tips.
- CardGrid, Card, LinkCard: use for hubs and navigation pages.
- Badge: use for status indicators (beta, preview, deprecated).

## Code examples
- Keep examples minimal, runnable, and focused on one concept.
- Add syntax highlighting and language tabs when appropriate.
- Prefer comments explaining intent, not restating code.
- Ensure examples reflect current APIs and are tested when possible.

## Visuals and diagrams
- Store images under `src/assets/docs/**` and reference with the `@/assets/docs/` prefix.
- Use descriptive filenames (e.g., `1-email-delivery-method.png`).
- Always include alt text and brief context near the image.
- Use diagrams when they improve understanding; keep them simple.

## Links and cross-references
- Use descriptive link text (avoid “click here”).
- Use relative paths for internal links.
- For external links, include `target="_blank"` and `rel="noopener"`.

## Accessibility
- Maintain proper heading hierarchy and list semantics.
- Provide meaningful alt text for images.
- Ensure good color contrast and readable text.
- Keep interactive examples keyboard-accessible where relevant.

## SEO and discoverability
- Write descriptive titles and meta descriptions that reflect user tasks.
- Use relevant keywords naturally; avoid stuffing.
- Structure content with clear headings for better search understanding.

## Import statements
- Import components at the top of MDX files.
- Use consistent import paths with the `@/` prefix.
- Group related imports together.

## Styling
- Use Tailwind CSS utility classes for custom styling.
- Apply consistent spacing and typography.
- Use custom CSS sparingly; document when non-obvious.

## Quality standards (review checklist)
- [ ] Content is accurate and up-to-date
- [ ] Technical details are correct
- [ ] Examples work and are relevant
- [ ] Links are valid and functional
- [ ] Images are properly referenced and have alt text
- [ ] Code examples are tested where possible
- [ ] Content follows established patterns and component usage

## Common pitfalls to avoid
- Don’t use overly technical jargon without explanation.
- Don’t assume reader knowledge of advanced concepts.
- Don’t skip important context or prerequisites.
- Don’t use inconsistent terminology across pages.
- Don’t create overly long, unfocused content.

## Maintenance
- Keep documentation synchronized with product changes.
- Update examples when APIs or behaviors change.
- Review and refresh content regularly.
- Remove outdated information promptly.

### Link management
- Validate internal and external links.
- Update broken links immediately.
- Use relative paths for internal links.
- Include proper external link attributes (`target="_blank"`, `rel="noopener"`).

This rule encodes the tw-guide for Scalekit and ensures consistent, high-quality documentation for developers.