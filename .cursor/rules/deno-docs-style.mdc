## Deno docs writing style (Cursor rule)

Use these rules to write documentation that matches the tone and structure of Deno’s official docs. Apply them to all MD/MDX content, titles, subtitles, and navigation labels.

### Language and tone
- **Audience-first**: Explain what matters to a developer trying to get work done.
- **Direct and concise**: Short sentences. Prefer clarity over flourish.
- **Active voice**: “Run the command” not “The command should be run.”
- **Second person**: Address the reader as “you” when giving instructions.
- **Present tense**: “This command installs…” not “This command will install…”.
- **Neutral, professional**: Avoid hype, slang, and filler words like “simply”, “just”, “obviously”.
- **Consistent terminology**: Use the same terms throughout a page. Prefer standard names over synonyms.

### Phrasing patterns
- **Imperative for procedures**: “Install”, “Create”, “Run”, “Configure”, “Test”.
- **Front-load the action**: Start sentences with the verb or key concept.
- **Explain why when useful**: Briefly justify non-obvious steps.
- **Prefer examples over theory**: Show the common path first; link to details.
- **One idea per sentence/paragraph**: Improves skimmability.

### Titles, subtitles, and headings
- **Sentence case** for all titles and headings.
- **Short, descriptive page titles**: 3–7 words when possible.
  - Good: “Install Deno on macOS”
  - Bad: “Installing Deno On MacOS – A Comprehensive Guide”
- **Headings describe outcomes**, not categories.
  - Good: “Run a script”
  - Bad: “Scripts”
- **Subheadings** clarify purpose or scope, not marketing.
- **Avoid gerunds in headings** when an imperative works: prefer “Configure proxies” over “Configuring proxies”.

### Sidebar labels (navigation)
- **Concise and scannable**: 1–3 words.
- **Sentence case**; no punctuation.
- **Outcome- or object-focused**: “Install”, “CLI”, “HTTP server”, “Permissions”.
- **Match page title semantics**, but shorter when useful.

### Frontmatter guidance
- **title**: Sentence case, clear outcome.
- **description**: One sentence (≤ 160 chars), purpose + key value.
- **sidebar.label**: Shorter form of title; sentence case.
- **tableOfContents**: Enable on longer pages with multiple sections.

Example frontmatter:
```yaml
---
title: "Run a script"
description: "Execute a local or remote script with the Deno CLI."
tableOfContents: true
sidebar:
  label: "Run script"
---
```

### Page structure
- **Start with a one-paragraph overview**: what this page covers and when to use it.
- **Primary path first**: The 80% use case up top; edge cases later.
- **Step-by-step for tasks**: Use numbered steps; each step begins with a verb.
- **Break up long sections**: Subheadings every 3–6 paragraphs.
- **Asides for important notes**: Tips, cautions, and references.

### Examples and code
- **Runnable, minimal examples** that work as-is.
- **Prefer CLI-first** where relevant; show file layout when helpful.
- **Label code blocks** with titles for context (e.g., “Terminal”, “main.ts”).
- **Annotate only what matters**: Keep comments brief and purposeful.
- **Use consistent variable and file names** across a page.

Example block titles:
```bash title="Terminal" frame="terminal"
deno run -A main.ts
```

```ts title="main.ts"
import { serve } from "https://deno.land/std/http/server.ts";

serve((req) => new Response("Hello, Deno!"));
```

### Linking and references
- **Descriptive link text**: “See permission flags” not “click here”.
- **Prefer relative links** for internal pages; include anchors for sections.
- **Reference APIs consistently**: Backticks for code (`Deno.run`, `--allow-net`).

### Formatting conventions
- **Use backticks** for code, file names, CLI flags, and endpoints.
- **Lists for options and features**; tables only when comparisons are clearer.
- **No trailing punctuation** in navigation labels; avoid emojis and exclamation marks.
- **Keep headings parallel**: Similar grammatical form within a section.

### Do and don’t
- **Do**: “Install Deno with Homebrew.”
- **Don’t**: “We’ll just quickly install Deno with Homebrew!”
- **Do**: “Run a script with permissions.”
- **Don’t**: “Running your scripts and stuff.”
- **Do**: “Configure proxies”
- **Don’t**: “Proxy configuration settings explained”

### Quality checklist
- [ ] Headings and titles use sentence case
- [ ] Page opens with a clear, one-paragraph summary
- [ ] Steps use imperative verbs and are task-focused
- [ ] Examples are runnable and minimal, with contextual titles
- [ ] Sidebar label is concise (1–3 words) and matches the page
- [ ] Links are descriptive; APIs/flags use code formatting
- [ ] Terminology is consistent across the page
- [ ] No filler words (“just”, “simply”, “basically”), no passive voice where avoidable
