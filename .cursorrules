# Scalekit Documentation - Cursor Rules

## Overview
This is the Scalekit developer documentation site built with Astro and Starlight. Follow these technical writing principles when creating or editing documentation content.

## Content Structure & Organization

### Document Structure
- Use clear, descriptive titles that explain the purpose
- Include comprehensive descriptions in frontmatter
- Organize content with logical heading hierarchy (H2, H3, H4)
- Use tableOfContents when content has multiple sections
- Set appropriate sidebar labels for navigation

### Content Organization
- **FSA (Full Stack Auth)** - Complete authentication solution
- **SSO** - Single Sign-On integration guides
- **Directory/SCIM** - User provisioning and directory sync
- **M2M** - Machine-to-machine authentication
- **Guides** - Integration and setup guides
- **Reference** - API references and technical details

## Writing Style & Tone

### Clarity & Conciseness
- Write clear, concise descriptions that avoid unnecessary jargon
- Use bullet points for listing items to improve clarity
- Provide context when explaining features or functions
- Keep explanations focused and to the point

### User-Focused Approach
- Start with user problems and scenarios
- Explain "why" before "how" - provide context for features
- Use concrete examples and real-world scenarios
- Address common use cases and pain points

### Technical Accuracy
- Ensure all technical details are accurate and up-to-date
- Use precise terminology consistently
- Include relevant code examples when appropriate
- Reference official specifications and standards correctly

## Content Patterns

### Introduction Sections
- Begin with a clear value proposition
- Explain the problem being solved
- Provide context about when to use the feature
- Use analogies to explain complex concepts (e.g., "Think of MCP like a USB-C port for AI applications")

### Step-by-Step Guides
- Use the `<Steps>` component for sequential instructions
- Break complex processes into manageable steps
- Include prerequisites clearly
- Provide verification steps to confirm success

### Best Practices
- Use `<CheckItem>` components for best practices lists
- Organize practices by importance or logical flow
- Include security considerations prominently
- Provide actionable, specific guidance

### Code Examples with Expressive Code
- Include relevant code snippets with proper syntax highlighting using Expressive Code
- Use tabs for multiple language examples when needed
- Keep examples focused and minimal
- Include comments to explain key concepts
- Leverage Expressive Code features for enhanced documentation

## Visual & Interactive Elements

### Components Usage
- Use `<CardGrid>`, `<Card>`, and `<LinkCard>` for organized content presentation
- Implement `<Tabs>` and `<TabItem>` for multi-language examples
- Use `<Aside>` for important notes, tips, and warnings
- Include `<Badge>` components for status indicators

### Images & Diagrams
- Store images in appropriate subdirectories under `src/assets/docs/`
- Use descriptive filenames with numbering (e.g., `1-email-delivery-method.png`)
- Reference images with proper paths using `@/assets/docs/` prefix
- Include alt text and context for accessibility

### Tables
- Use tables for comparing features, options, or specifications
- Keep column headers concise (1-3 words max)
- Ensure tables are responsive and readable
- Use consistent formatting across all tables

## Technical Writing Principles

### Information Architecture
- Follow a logical flow from overview to implementation
- Group related concepts together
- Use consistent terminology throughout
- Provide clear navigation between related topics

### Accessibility
- Use descriptive link text
- Include proper heading structure
- Ensure color contrast meets standards
- Provide alternative text for images

### SEO & Discoverability
- Use descriptive page titles and meta descriptions
- Include relevant keywords naturally in content
- Structure content for search engine understanding
- Use proper heading hierarchy for SEO

## Code & Configuration

### Frontmatter Standards
```yaml
---
title: "Descriptive Title"
description: "Clear, concise description of the content"
tableOfContents: true/false
sidebar:
  label: "Navigation Label"
prev: false/object
next: false/object
---
```

### Import Statements
- Import components at the top of MDX files
- Use consistent import paths with `@/` prefix
- Group related imports together

### Styling
- Use Tailwind CSS classes for custom styling
- Apply consistent spacing and typography
- Use custom CSS sparingly and document when needed

## Quality Standards

### Review Checklist
- [ ] Content is accurate and up-to-date
- [ ] Technical details are correct
- [ ] Examples work and are relevant
- [ ] Links are valid and functional
- [ ] Images are properly referenced
- [ ] Code examples are tested
- [ ] Content follows established patterns

### Common Pitfalls to Avoid
- Don't use overly technical jargon without explanation
- Don't assume reader knowledge of advanced concepts
- Don't skip important context or prerequisites
- Don't use inconsistent terminology
- Don't create overly long, unfocused content

## Maintenance

### Content Updates
- Keep documentation synchronized with product changes
- Update examples when APIs change
- Review and refresh content regularly
- Remove outdated information promptly

### Link Management
- Validate internal and external links
- Update broken links immediately
- Use relative paths for internal links
- Include proper external link attributes (`target="_blank"`, `rel="noopener"`)

## Expressive Code Usage Guidelines

### Configuration Overview
Expressive Code is configured in `astro.config.mjs` with the following settings:
- **Themes**: `tokyo-night` (dark) and `light-plus` (light)
- **Font**: JetBrains Mono with fallbacks
- **Dark mode**: Integrated with Starlight's dark mode switch
- **Border radius**: 0.375rem for consistent styling
- **Plugin**: Collapsible sections plugin enabled

### Complete Feature Set
Expressive Code provides comprehensive text marking & annotation capabilities:

#### Core Features
- **Syntax Highlighting**: VS Code-powered syntax highlighting for 200+ languages
- **Text Markers**: Line and inline annotations with mark, ins, del types
- **Frames**: Editor/terminal window frames with titles
- **Collapsible Sections**: Hide/show code sections
- **Copy to Clipboard**: Built-in copy functionality
- **Multi-theme Support**: Light/dark theme switching
- **Zero Dependencies**: Works without React, Vue, or other frameworks
- **Accessibility**: Automatic color contrast and screen reader support

#### Marker Types
- **mark**: Neutral highlighting (default)
- **ins**: Insertion markers (green) - for added code
- **del**: Deletion markers (red) - for removed code
- **Custom**: Define your own marker types

#### Annotation Methods
- **Line Numbers**: `{1,3,5-7}` for line ranges
- **Text Matching**: `"exact text"` for string matching  
- **Regex Patterns**: `/pattern/` for complex matching
- **Diff Syntax**: `+`/`-` prefixes for diff-style annotations

### Basic Code Blocks

#### Standard Syntax Highlighting
```language
// Your code here
```

#### With Title
```javascript title="filename.js"
// JavaScript code with file title
```

#### With Line Numbers
```python showLineNumbers
# Python code with line numbers starting from 1
```

#### Custom Line Number Start
```go showLineNumbers=42
// Go code with line numbers starting from 42
```

### Advanced Features

#### Line Highlighting
```javascript {2,4-6}
// Line 1 - normal
const highlighted = 'Line 2 - highlighted'
// Line 3 - normal  
const start = 'Line 4 - highlighted'
const middle = 'Line 5 - highlighted'
const end = 'Line 6 - highlighted'
```

#### Insertions and Deletions
```javascript ins={2} del={4}
// Line 1 - normal
const added = 'Line 2 - marked as inserted'
// Line 3 - normal
const removed = 'Line 4 - marked as deleted'
```

#### Word-Level Highlighting
```javascript "important" /pattern/
const important = 'This word will be highlighted'
const pattern = 'This matches the regex pattern'
```

#### Collapsible Sections
```javascript collapse={1-5}
// This section will be collapsed by default
const setup = 'Configuration code'
const config = { /* ... */ }
const init = () => { /* ... */ }
// End of collapsed section

// This part remains visible
const mainFunction = () => {
  console.log('Main functionality')
}
```

#### Code Wrapping
```bash wrap
curl -G -v --location "https://very-long-url-that-would-normally-overflow.example.com/api/endpoint" --data-urlencode 'param1=value1' --data-urlencode 'param2=value2'
```

#### Frame Types
```javascript title="editor-frame.js" frame="code"
// This shows an editor-style frame
const code = 'example'
```

```bash title="Terminal" frame="terminal"
# This shows a terminal-style frame
npm install @scalekit-sdk/node
```

#### Diff-Style Syntax
```diff
// Using diff language
- const old = 'remove this'
+ const new = 'add this'
  const unchanged = 'stays the same'
```

```javascript lang="js" useDiffSyntax
// Using diff syntax with JavaScript highlighting
- const old = 'remove this'
+ const new = 'add this'
  const unchanged = 'stays the same'
```

#### ANSI Color Support
```ansi
[31mError:[0m Something went wrong
[32mSuccess:[0m Operation completed
[33mWarning:[0m Check configuration
```

#### Meta String Options
All options that can be combined in the meta string:
```javascript title="filename.js" {1,3-5} ins={2} del={7} showLineNumbers=42 wrap collapse={8-12} frame="code" lang="js" useDiffSyntax
// Meta string: title="filename.js" {1,3-5} ins={2} del={7} showLineNumbers=42 wrap collapse={8-12} frame="code" lang="js" useDiffSyntax
const highlighted = 'line 1 highlighted'
const inserted = 'line 2 marked as insertion'
const highlighted2 = 'line 3 highlighted'
const highlighted3 = 'line 4 highlighted'  
const highlighted4 = 'line 5 highlighted'
const normal = 'line 6 normal'
const deleted = 'line 7 marked as deletion'
// Start of collapsed section
const setup1 = 'hidden by default'
const setup2 = 'also hidden'
const setup3 = 'collapsed content'
// End of collapsed section
const visible = 'this line is visible'
```

#### Combining Multiple Features
```typescript title="auth.ts" {3,7} ins={2} del={5} showLineNumbers wrap
// Authentication service implementation
import { ScalekitClient } from '@scalekit-sdk/node' // Added import
const client = new ScalekitClient(url, id, secret)

const oldMethod = () => { /* deprecated */ } // Will be removed

export const authenticate = async (code: string) => {
  return await client.authenticateWithCode(code, redirectUri)
}
```

### Multi-Language Code Examples

#### Using Starlight Tabs with Expressive Code
```mdx
<Tabs syncKey="tech-stack">
  <TabItem value="node" label="Node.js">
  ```javascript title="auth.js"
  import { Scalekit } from '@scalekit-sdk/node'
  
  const scalekit = new Scalekit(
    process.env.SCALEKIT_ENVIRONMENT_URL,
    process.env.SCALEKIT_CLIENT_ID,
    process.env.SCALEKIT_CLIENT_SECRET
  )
  ```
  </TabItem>
  <TabItem value="python" label="Python">
  ```python title="auth.py"
  from scalekit import ScalekitClient
  
  scalekit = ScalekitClient(
      os.environ.get('SCALEKIT_ENVIRONMENT_URL'),
      os.environ.get('SCALEKIT_CLIENT_ID'),
      os.environ.get('SCALEKIT_CLIENT_SECRET')
  )
  ```
  </TabItem>
</Tabs>
```

### Best Practices for Code Documentation

#### File Structure Examples
```bash title="Project structure" showLineNumbers=false
project/
├── src/
│   ├── auth/
│   │   ├── scalekit.js      # Scalekit client setup
│   │   └── middleware.js    # Authentication middleware
│   └── routes/
│       ├── login.js         # Login route
│       └── callback.js      # OAuth callback
└── package.json
```

#### Environment Configuration
```bash title=".env" showLineNumbers=false
SCALEKIT_ENVIRONMENT_URL='https://your-environment.scalekit.cloud'
SCALEKIT_CLIENT_ID='skc_1234567890'
SCALEKIT_CLIENT_SECRET='your_secret_here'
```

#### API Response Examples
```json title="Authentication response" showLineNumbers=false
{
  "user": {
    "id": "usr_1234567890",
    "email": "user@example.com",
    "name": "John Doe"
  },
  "idToken": "eyJhbGciOiJSUzI1NiIs...",
  "accessToken": "eyJhbGciOiJSUzI1NiIs...",
  "refreshToken": "rt_1234567890..."
}
```

### Code Block Annotations

#### Security Notes
```javascript title="secure-session.js"
// ⚠️ SECURITY: Always encrypt tokens before storing
const encryptedToken = encrypt(accessToken, secretKey)

// ✅ GOOD: Use HTTP-only cookies
res.cookie('token', encryptedToken, {
  httpOnly: true,
  secure: true,
  sameSite: 'strict'
})
```

#### Performance Considerations
```javascript title="optimized-auth.js"
// 🚀 PERFORMANCE: Cache client instance
const scalekitClient = new Scalekit(/* config */)

// ❌ AVOID: Creating new client for each request
// const client = new Scalekit(/* config */) // Don't do this
```

### Common Patterns

#### Error Handling Examples
```javascript title="error-handling.js" {4-8}
try {
  const result = await scalekit.authenticateWithCode(code, redirectUri)
  return result
} catch (error) {
  if (error.code === 'INVALID_CODE') {
    return { error: 'Authentication failed' }
  }
  throw error // Re-throw unexpected errors
}
```

#### Middleware Implementation
```javascript title="middleware.js" collapse={1-3}
// Import statements and configuration
import { scalekit } from './auth-client.js'
import { decrypt } from './crypto-utils.js'

export const requireAuth = async (req, res, next) => {
  const token = req.cookies.accessToken
  
  if (!token) {
    return res.status(401).json({ error: 'No token provided' })
  }
  
  try {
    const decryptedToken = decrypt(token)
    const isValid = await scalekit.validateAccessToken(decryptedToken)
    
    if (isValid) {
      next()
    } else {
      res.status(401).json({ error: 'Invalid token' })
    }
  } catch (error) {
    res.status(500).json({ error: 'Token validation failed' })
  }
}
```

### Quality Standards for Code Examples

#### Advanced Configuration Options

##### Theme Configuration
```javascript
// Multi-theme support
themes: ['tokyo-night', 'light-plus']
// or
themes: [
  'github-dark',
  'github-light',
  // VS Code themes, Shiki themes, or custom themes
]
```

##### Style Overrides
```javascript
styleOverrides: {
  codeFontFamily: "'JetBrains Mono', monospace",
  borderRadius: '0.375rem',
  // Text marker customization
  textMarkers: {
    markBackground: 'rgba(255, 255, 0, 0.3)',
    insBackground: 'rgba(0, 255, 0, 0.3)',
    delBackground: 'rgba(255, 0, 0, 0.3)',
  }
}
```

##### Plugin Configuration
```javascript
plugins: [
  pluginCollapsibleSections({
    collapsePreserveIndent: true,
    collapseStyle: 'github'
  }),
  // Custom plugins can be added here
]
```

##### Default Props
```javascript
defaultProps: {
  showLineNumbers: true,
  wrap: true,
  preserveIndent: true
}
```

#### Complete Meta String Reference

Available meta string attributes:
- **title**: `title="filename.js"` - File or block title
- **showLineNumbers**: `showLineNumbers` or `showLineNumbers=42` - Show line numbers
- **wrap**: `wrap` - Enable word wrapping for long lines
- **lang**: `lang="javascript"` - Override syntax highlighting language
- **frame**: `frame="code"` or `frame="terminal"` - Frame type
- **useDiffSyntax**: `useDiffSyntax` - Enable +/- diff prefixes
- **collapse**: `collapse={1-5}` - Collapse line ranges
- **{numbers}**: `{1,3,5-7}` - Highlight lines (mark)
- **ins**: `ins={2,4}` or `ins="text"` - Mark insertions
- **del**: `del={3,6}` or `del="text"` - Mark deletions
- **mark**: `mark={1}` or `mark="text"` - Neutral highlighting
- **preserveIndent**: `preserveIndent=false` - Control indentation

#### Language Support
Expressive Code supports 200+ languages including:
- **Web**: javascript, typescript, html, css, scss, json, yaml
- **Backend**: python, java, go, rust, php, ruby, csharp
- **Shell**: bash, powershell, fish, zsh
- **Config**: dockerfile, nginx, apache, xml, toml
- **Data**: sql, graphql, mongodb, redis
- **Markup**: markdown, mdx, latex, restructuredtext
- **Mobile**: swift, kotlin, dart, objective-c
- **Functional**: haskell, clojure, elixir, erlang, fsharp
- **Systems**: c, cpp, assembly, verilog, vhdl
- **Other**: diff, ansi, regex, http, curl

#### Code Example Checklist
- [ ] Use appropriate syntax highlighting language from supported list
- [ ] Include relevant file titles when showing file content  
- [ ] Add line numbers for longer examples (>10 lines)
- [ ] Highlight important lines that relate to the explanation
- [ ] Use collapsible sections for setup/boilerplate code
- [ ] Use appropriate frame type (code/terminal) for context
- [ ] Enable word wrap for long lines (URLs, commands)
- [ ] Use diff syntax for showing code changes
- [ ] Include proper error handling where applicable
- [ ] Add security annotations for auth-related code
- [ ] Test all code examples before publishing
- [ ] Use consistent variable names across examples
- [ ] Include necessary import statements
- [ ] Use ANSI colors for terminal output examples
- [ ] Combine multiple features when it enhances understanding

#### Avoiding Common Mistakes
- Don't use generic variable names like `data` or `result` without context
- Don't show incomplete code without indicating what's missing
- Don't mix different coding styles within the same example
- Don't forget to escape special characters in code comments
- Don't use outdated API methods or deprecated patterns

## MDX File Structure and Indentation Rules

### Critical: Steps Component Indentation
The `<Steps>` component requires proper indentation to avoid parsing errors:

#### Correct Structure:
```mdx
<Steps>
1. ## First Step

   Content for first step goes here with 3-space indentation.
   
   <Tabs syncKey="example">
   <TabItem value="js" label="JavaScript">
   ```javascript
   // Code here
   ```
   </TabItem>
   </Tabs>

2. ## Second Step

   Content for second step with consistent 3-space indentation.
   
   <Aside type="tip">
   Note content also indented with 3 spaces.
   </Aside>

</Steps>
```

#### Common Indentation Errors to Avoid:
```mdx
<!-- ❌ WRONG: Using ## instead of numbered format -->
<Steps>
## First Step
Content here will break the Steps component

## Second Step  
More content that breaks parsing
</Steps>

<!-- ❌ WRONG: Inconsistent indentation -->
<Steps>
1. ## First Step
Content not indented properly
    <Tabs>  <!-- Too much indentation -->
  <TabItem>  <!-- Inconsistent -->
</Steps>

<!-- ❌ WRONG: Missing indentation -->
<Steps>
1. ## First Step
<Tabs>
<TabItem>
```code```
</TabItem>
</Tabs>
</Steps>
```

### Indentation Standards

#### Component Nesting Rules:
- **Steps content**: 3-space indentation from step number
- **Tabs within Steps**: 3-space indentation from step content
- **TabItem within Tabs**: Same level as parent Tabs
- **Code blocks**: Same level as parent TabItem
- **Aside components**: 3-space indentation within Steps

#### Markdown Elements:
- **Paragraphs**: 3-space indentation within Steps
- **Lists**: 3-space base + 2 additional for sub-items  
- **Code blocks**: Match parent component indentation
- **Images**: 3-space indentation within Steps

### Validation Checklist for MDX Files

Before saving any MDX file with Steps:
- [ ] Each step uses numbered format: `1. ## Title`
- [ ] All step content indented with exactly 3 spaces
- [ ] Tabs components indented 3 spaces from step
- [ ] TabItem at same level as parent Tabs
- [ ] Code blocks properly indented within TabItem
- [ ] Aside components indented 3 spaces within Steps
- [ ] No trailing whitespace on empty lines
- [ ] Consistent indentation throughout entire file

### Auto-Fix Command
When encountering Steps indentation errors, run:
```bash
# Use a formatter that preserves MDX structure
prettier --write src/content/docs/**/*.mdx
```

### Prevention Strategy
1. **Use editor with MDX support** and visible whitespace
2. **Copy indentation from working examples** rather than typing manually  
3. **Test locally** before committing to catch parsing errors
4. **Use consistent 3-space indentation** for all Steps content
5. **Validate component nesting** structure before adding content

This cursor rule ensures consistent, high-quality documentation that serves Scalekit's developer community effectively.