# Scalekit Documentation - Cursor Rules

## Overview
This is the Scalekit developer documentation site built with Astro and Starlight. Follow these technical writing principles when creating or editing documentation content.

## Content Structure & Organization

### Document Structure
- Use clear, descriptive titles that explain the purpose
- Include comprehensive descriptions in frontmatter
- Organize content with logical heading hierarchy (H2, H3, H4)
- Use tableOfContents when content has multiple sections
- Set appropriate sidebar labels for navigation

### Content Organization
- **FSA (Full Stack Auth)** - Complete authentication solution
- **SSO** - Single Sign-On integration guides
- **Directory/SCIM** - User provisioning and directory sync
- **M2M** - Machine-to-machine authentication
- **Guides** - Integration and setup guides
- **Reference** - API references and technical details

## Writing Style & Tone

### Clarity & Conciseness
- Write clear, concise descriptions that avoid unnecessary jargon
- Use bullet points for listing items to improve clarity
- Provide context when explaining features or functions
- Keep explanations focused and to the point

### User-Focused Approach
- Start with user problems and scenarios
- Explain "why" before "how" - provide context for features
- Use concrete examples and real-world scenarios
- Address common use cases and pain points

### Technical Accuracy
- Ensure all technical details are accurate and up-to-date
- Use precise terminology consistently
- Include relevant code examples when appropriate
- Reference official specifications and standards correctly

## Content Patterns

### Introduction Sections
- Begin with a clear value proposition
- Explain the problem being solved
- Provide context about when to use the feature
- Use analogies to explain complex concepts (e.g., "Think of MCP like a USB-C port for AI applications")

### Step-by-Step Guides
- Use the `<Steps>` component for sequential instructions
- Break complex processes into manageable steps
- Include prerequisites clearly
- Provide verification steps to confirm success

### Best Practices
- Use `<CheckItem>` components for best practices lists
- Organize practices by importance or logical flow
- Include security considerations prominently
- Provide actionable, specific guidance

### Code Examples
- Include relevant code snippets with proper syntax highlighting
- Use tabs for multiple language examples when needed
- Keep examples focused and minimal
- Include comments to explain key concepts

## Visual & Interactive Elements

### Components Usage
- Use `<CardGrid>`, `<Card>`, and `<LinkCard>` for organized content presentation
- Implement `<Tabs>` and `<TabItem>` for multi-language examples
- Use `<Aside>` for important notes, tips, and warnings
- Include `<Badge>` components for status indicators

### Images & Diagrams
- Store images in appropriate subdirectories under `src/assets/docs/`
- Use descriptive filenames with numbering (e.g., `1-email-delivery-method.png`)
- Reference images with proper paths using `@/assets/docs/` prefix
- Include alt text and context for accessibility

### Tables
- Use tables for comparing features, options, or specifications
- Keep column headers concise (1-3 words max)
- Ensure tables are responsive and readable
- Use consistent formatting across all tables

## Technical Writing Principles

### Information Architecture
- Follow a logical flow from overview to implementation
- Group related concepts together
- Use consistent terminology throughout
- Provide clear navigation between related topics

### Accessibility
- Use descriptive link text
- Include proper heading structure
- Ensure color contrast meets standards
- Provide alternative text for images

### SEO & Discoverability
- Use descriptive page titles and meta descriptions
- Include relevant keywords naturally in content
- Structure content for search engine understanding
- Use proper heading hierarchy for SEO

## Code & Configuration

### Frontmatter Standards
```yaml
---
title: "Descriptive Title"
description: "Clear, concise description of the content"
tableOfContents: true/false
sidebar:
  label: "Navigation Label"
prev: false/object
next: false/object
---
```

### Import Statements
- Import components at the top of MDX files
- Use consistent import paths with `@/` prefix
- Group related imports together

### Styling
- Use Tailwind CSS classes for custom styling
- Apply consistent spacing and typography
- Use custom CSS sparingly and document when needed

## Quality Standards

### Review Checklist
- [ ] Content is accurate and up-to-date
- [ ] Technical details are correct
- [ ] Examples work and are relevant
- [ ] Links are valid and functional
- [ ] Images are properly referenced
- [ ] Code examples are tested
- [ ] Content follows established patterns

### Common Pitfalls to Avoid
- Don't use overly technical jargon without explanation
- Don't assume reader knowledge of advanced concepts
- Don't skip important context or prerequisites
- Don't use inconsistent terminology
- Don't create overly long, unfocused content

## Maintenance

### Content Updates
- Keep documentation synchronized with product changes
- Update examples when APIs change
- Review and refresh content regularly
- Remove outdated information promptly

### Link Management
- Validate internal and external links
- Update broken links immediately
- Use relative paths for internal links
- Include proper external link attributes (`target="_blank"`, `rel="noopener"`)

This cursor rule ensures consistent, high-quality documentation that serves Scalekit's developer community effectively.