---
import Default from '@astrojs/starlight/components/Footer.astro'
import IconLucideThumbsUp from '~icons/lucide/thumbs-up'
import IconLucideThumbsDown from '~icons/lucide/thumbs-down'
---

<Default {...Astro.props} />

<footer class="fold-full-width footer">
  <div class="home-container">
    <div class="footer__content">
      <div data-feedback-section class="feedback-section">
        <span class="feedback-question">Were you able to complete your task?</span>
        <div class="feedback-actions" role="group" aria-label="Task completion feedback">
          <button type="button" data-feedback-value="yes" class="feedback-button">
            <IconLucideThumbsUp class="feedback-button__icon" aria-hidden="true" />
            Yes
          </button>
          <button type="button" data-feedback-value="no" class="feedback-button">
            <IconLucideThumbsDown class="feedback-button__icon" aria-hidden="true" />
            No
          </button>
        </div>
        <p data-feedback-response class="feedback-message" role="status" aria-live="polite" hidden>
        </p>
      </div>
    </div>
  </div>
</footer>

<style>
  :global(.fold-full-width.footer) {
    margin: 1rem 0;
    padding-top: 1rem;
    border-top: 1px solid var(--sl-color-gray-5);
    text-align: left;
    font-size: 0.875rem;
    color: var(--sl-color-gray-3);
  }

  :global(.fold-full-width .feedback-section) {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 0.5rem 0.75rem;
    color: var(--sl-color-gray-1);
  }

  :global(.fold-full-width .feedback-question) {
    font-weight: 400;
    display: inline-flex;
    align-items: center;
    gap: 0.4rem;
  }

  :global(.fold-full-width .feedback-actions) {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
  }

  :global(.fold-full-width .feedback-button) {
    display: inline-flex;
    align-items: center;
    gap: 0.3rem;
    padding: 0.3rem 0.85rem;
    border-radius: 0.375rem;
    border: 1px solid var(--sl-color-gray-5);
    background: transparent;
    color: var(--sl-color-gray-1);
    cursor: pointer;
    transition:
      background 0.2s ease,
      color 0.2s ease,
      border-color 0.2s ease;
  }

  :global(.fold-full-width .feedback-button:hover:not(:disabled)) {
    background: var(--sl-color-gray-6);
  }

  :global(.fold-full-width .feedback-button:disabled) {
    opacity: 0.6;
    cursor: not-allowed;
  }

  :global(.fold-full-width .feedback-button__icon) {
    width: 1rem;
    height: 1rem;
  }

  :global(.fold-full-width .feedback-message) {
    margin: 0;
    color: var(--sl-color-gray-2);
    width: 100%;
  }

  :global(.fold-full-width .feedback-followup) {
    color: var(--sl-color-accent);
    font-weight: 500;
    text-decoration: underline;
    margin-left: 0.25rem;
  }

  :global(.fold-full-width .feedback-followup:hover) {
    text-decoration-thickness: 2px;
  }

  @media (max-width: 36rem) {
    :global(.fold-full-width .feedback-section) {
      flex-direction: column;
      align-items: flex-start;
    }

    :global(.fold-full-width .feedback-actions) {
      width: 100%;
    }

    :global(.fold-full-width .feedback-button) {
      flex: 1 1 auto;
      justify-content: center;
    }
  }
</style>

<script is:inline>
  const FEEDBACK_FORM_URL =
    'https://www.notion.so/scalekitinc/27887a580a3780fbb4b8fad28038392a?pvs=106'

  function setupFeedbackSections(root = document) {
    const sections = Array.from(root.querySelectorAll('[data-feedback-section]'))

    sections.forEach((section) => {
      if (section.dataset.feedbackBound === 'true') return
      section.dataset.feedbackBound = 'true'

      const buttons = Array.from(section.querySelectorAll('[data-feedback-value]'))
      const response = section.querySelector('[data-feedback-response]')
      const question = section.querySelector('.feedback-question')

      if (buttons.length === 0 || !response) return

      const showResponse = ({ text, linkText }) => {
        response.innerHTML = `${text}<a class="feedback-followup" href="${FEEDBACK_FORM_URL}" target="_blank" rel="noopener noreferrer">${linkText}</a>`
        response.hidden = false
        response.removeAttribute('hidden')
      }

      const captureFeedback = (value) => {
        if (typeof window.posthog?.capture !== 'function') {
          console.warn('PostHog is not available to capture feedback.')
          return
        }

        window.posthog.capture('docs_page_feedback', {
          feedback: value,
          pathname: window.location.pathname,
        })
      }

      const handleClick = (event) => {
        const button = event.currentTarget
        const value = button.getAttribute('data-feedback-value')
        if (!value) return

        buttons.forEach((btn) => btn.setAttribute('disabled', 'true'))

        const followUp =
          value === 'yes'
            ? {
                text: 'Thanks for sharing! ',
                linkText: 'Share what worked well',
              }
            : {
                text: 'Thanks for the feedback. ',
                linkText: 'Make this page work better for you',
              }

        if (question) {
          question.classList.add('feedback-question--answered')
        }

        showResponse(followUp)
        captureFeedback(value)
      }

      buttons.forEach((button) => {
        button.addEventListener('click', handleClick)
      })
    })
  }

  if (typeof window !== 'undefined') {
    setupFeedbackSections(document)
    document.addEventListener('astro:page-load', (event) => {
      setupFeedbackSections(event.target)
    })
  }
</script>
